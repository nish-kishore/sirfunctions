% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dal.R
\name{sirfunctions_io}
\alias{sirfunctions_io}
\title{sirfunctions i/o handler}
\usage{
sirfunctions_io(
  io,
  default_dir = "GID/PEB/SIR",
  file_loc,
  obj = NULL,
  edav = as.logical(Sys.getenv("POLIS_EDAV_FLAG")),
  azcontainer = suppressMessages(sirfunctions::get_azure_storage_connection()),
  full_names = F,
  ...
)
}
\arguments{
\item{io}{\code{str} The type of operation to use. Valid values include:
\itemize{
\item \code{"read"}: reads data from the specified \code{file_path}.
\item \code{"write"}: writes data to the specified \code{file_path}.
\item \code{"list"}: lists the files in the specified \code{file_path}.
\item \code{"exists.dir"}: determines whether a directory is present.
\item \code{"exists.file"}: determines whether a file is present.
\item \code{"create.dir"}: creates a directory to the specified \code{file_path}.
\item \code{"delete"}: deletes a file or folder in the specified \code{file_path}.
}}

\item{file_loc}{\code{str} Path of file relative to the \code{default_folder}.}

\item{obj}{\code{str} Object to be loaded into EDAV}

\item{edav}{\code{bool} Whether the function should interact with the EDAV environment.
Defaults to \code{FALSE}, which interacts with files locally.}

\item{azcontainer}{\verb{Azure container} A container object returned by
\code{\link[=get_azure_storage_connection]{get_azure_storage_connection()}}.}

\item{full_names}{\code{bool} If \code{io="list"}, include the full reference path. Default \code{FALSE}.}

\item{...}{Optional parameters that work with \code{\link[readr:read_delim]{readr::read_delim()}} or \code{\link[readxl:read_excel]{readxl::read_excel()}}.}

\item{default_folder}{\code{str} The default folder to use. Defaults to \verb{"GID/PEB/SIR}.}
}
\value{
Conditional on \code{io}. If \code{io} is \code{"read"}, then it will return a tibble. If \code{io} is \code{"list"}, it will return a
list of file names. Otherwise, the function will return \code{NULL}. \code{exists.dir} and \code{exists.file} will return a \code{bool}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Manages read/write/list/create/delete functions for sirfunctions. This function
is adapted from \href{https://github.com/nish-kishore/tidypolis/blob/4e2f75e5ee3205b84c5b78f4b1776e2270e1f9ec/R/dal.R#L15}{tidypolis_io}.
}
\examples{
\dontrun{
df <- sirfunctions_io("read", file_loc = "df1.csv") # read file from EDAV
# Passing parameters that work with read_csv or read_excel, like sheet or skip.
df2 <- sirfunctions_io("read", file_loc = "df2.xlsx", sheet = 1, skip = 2)
list_of_df <- list(df_1 = df, df_2 = df)
# Saves df to the test folder in EDAV
sirfunctions_io("write", file_loc = "Data/test/df.csv", obj = df)
# Saves list_of_df as an Excel file with multiple sheets.
sirfunctions_io("write", file_loc = "Data/test/df.xlsx", obj = list_of_df)
sirfunctions_io("exists.dir", "Data/nonexistentfolder") # returns FALSE
sirfunctions_io("exists.file", file_loc = "Data/test/df1.csv") # returns TRUE
sirfunctions_io("create", "Data/nonexistentfolder") # creates a folder called nonexistentfolder
sirfunctions_io("list") # list all files from the default directory
}

}
