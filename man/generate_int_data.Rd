% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dr.afp.functions.R
\name{generate_int_data}
\alias{generate_int_data}
\title{Generate a summary table for sample timeliness intervals}
\usage{
generate_int_data(
  afp_data,
  pop_data,
  start_date,
  end_date,
  spatial_scale,
  lab_data_summary = NULL,
  ctry.data = lifecycle::deprecated(),
  spatial.scale = lifecycle::deprecated(),
  lab.data = lifecycle::deprecated()
)
}
\arguments{
\item{afp_data}{\code{tibble} AFP dataset.}

\item{pop_data}{\code{tibble} Population dataset that matches the spatial scale.}

\item{start_date}{\code{str} Start date of analysis.}

\item{end_date}{\code{str} End date of analysis.}

\item{spatial_scale}{\code{str} Scale to summarize to. Valid values are: \verb{"ctry" or "prov"}. \code{"dist"} not available currently.}

\item{lab_data_summary}{\code{tibble} Summarized lab data, if available. This parameter will calculate timeliness intervals in the lab. Otherwise,
only the field component will be presented. This is the output of \code{\link[=generate_lab_timeliness]{generate_lab_timeliness()}}.}

\item{ctry.data}{\code{list} \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}}

Passing ctry.data has been deprecated in favor of independently assigning the AFP dataset to
afp.data and the population dataset to pop.data. This allows the function to run either on
raw.data or ctry.data.}
}
\value{
\code{tibble} A table summarizing median days for different timeliness intervals.
}
\description{
The summary table will output timeliness intervals of samples from collection to
lab testing. Lab timeliness will only be calculated if the lab data is attached. Otherwise,
by default, the function will return only the timeliness intervals up to when the samples were
sent to lab.
}
\examples{
\dontrun{
raw.data <- get_all_polio_data(attach.spatial.data = FALSE)
ctry.data <- extract_country_data("algeria", raw.data)
# lab data not attached
int.data <- generate_int_data(
  raw.data$afp, raw.data$ctry.pop,
  "2021-01-01", "2023-12-31", "ctry"
)

# If lab data is available. Assume ctry.data is loaded.
lab_path <- "C:/Users/ABC1/Desktop/algeria_lab.csv"
lab.data <- readr::read_csv(lab_path)
lab.data.summary <- generate_lab_timeliness(
  lab.data, "ctry",
  "2021-01-01", "2023-12-31"
)
int.data <- generate_int_data(
  ctry.data$afp.all.2, ctry.data$ctry.pop,
  "2021-01-01", "2023-12-31", "ctry",
  lab.data.summary
)
}

}
\seealso{
\code{\link[=clean_ctry_data]{clean_ctry_data()}}
}
